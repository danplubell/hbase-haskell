{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Database.HBase.Internal.Thrift1.Hbase_Client(enableTable,disableTable,isTableEnabled,compact,majorCompact,getTableNames,getColumnDescriptors,getTableRegions,createTable,deleteTable,get,getVer,getVerTs,getRow,getRowWithColumns,getRowTs,getRowWithColumnsTs,getRows,getRowsWithColumns,getRowsTs,getRowsWithColumnsTs,mutateRow,mutateRowTs,mutateRows,mutateRowsTs,atomicIncrement,deleteAll,deleteAllTs,deleteAllRow,increment,incrementRows,deleteAllRowTs,scannerOpenWithScan,scannerOpen,scannerOpenWithStop,scannerOpenWithPrefix,scannerOpenTs,scannerOpenWithStopTs,scannerGet,scannerGetList,scannerClose,getRowOrBefore,getRegionInfo) where
import Data.IORef
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


import Database.HBase.Internal.Thrift1.Hbase_Types
import Database.HBase.Internal.Thrift1.Hbase

seqid = newIORef 0
enableTable (ip,op) arg_tableName = do
  send_enableTable op arg_tableName
  recv_enableTable ip
send_enableTable op arg_tableName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("enableTable", M_CALL, seqn)
  write_EnableTable_args op (EnableTable_args{f_EnableTable_args_tableName=Just arg_tableName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_enableTable ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_EnableTable_result ip
  readMessageEnd ip
  case f_EnableTable_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
disableTable (ip,op) arg_tableName = do
  send_disableTable op arg_tableName
  recv_disableTable ip
send_disableTable op arg_tableName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("disableTable", M_CALL, seqn)
  write_DisableTable_args op (DisableTable_args{f_DisableTable_args_tableName=Just arg_tableName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_disableTable ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DisableTable_result ip
  readMessageEnd ip
  case f_DisableTable_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
isTableEnabled (ip,op) arg_tableName = do
  send_isTableEnabled op arg_tableName
  recv_isTableEnabled ip
send_isTableEnabled op arg_tableName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("isTableEnabled", M_CALL, seqn)
  write_IsTableEnabled_args op (IsTableEnabled_args{f_IsTableEnabled_args_tableName=Just arg_tableName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_isTableEnabled ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_IsTableEnabled_result ip
  readMessageEnd ip
  case f_IsTableEnabled_result_success res of
    Just v -> return v
    Nothing -> do
      case f_IsTableEnabled_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "isTableEnabled failed: unknown result")
compact (ip,op) arg_tableNameOrRegionName = do
  send_compact op arg_tableNameOrRegionName
  recv_compact ip
send_compact op arg_tableNameOrRegionName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("compact", M_CALL, seqn)
  write_Compact_args op (Compact_args{f_Compact_args_tableNameOrRegionName=Just arg_tableNameOrRegionName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_compact ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Compact_result ip
  readMessageEnd ip
  case f_Compact_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
majorCompact (ip,op) arg_tableNameOrRegionName = do
  send_majorCompact op arg_tableNameOrRegionName
  recv_majorCompact ip
send_majorCompact op arg_tableNameOrRegionName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("majorCompact", M_CALL, seqn)
  write_MajorCompact_args op (MajorCompact_args{f_MajorCompact_args_tableNameOrRegionName=Just arg_tableNameOrRegionName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_majorCompact ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_MajorCompact_result ip
  readMessageEnd ip
  case f_MajorCompact_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
getTableNames (ip,op) = do
  send_getTableNames op
  recv_getTableNames ip
send_getTableNames op = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getTableNames", M_CALL, seqn)
  write_GetTableNames_args op (GetTableNames_args{})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getTableNames ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetTableNames_result ip
  readMessageEnd ip
  case f_GetTableNames_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetTableNames_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getTableNames failed: unknown result")
getColumnDescriptors (ip,op) arg_tableName = do
  send_getColumnDescriptors op arg_tableName
  recv_getColumnDescriptors ip
send_getColumnDescriptors op arg_tableName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getColumnDescriptors", M_CALL, seqn)
  write_GetColumnDescriptors_args op (GetColumnDescriptors_args{f_GetColumnDescriptors_args_tableName=Just arg_tableName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getColumnDescriptors ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetColumnDescriptors_result ip
  readMessageEnd ip
  case f_GetColumnDescriptors_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetColumnDescriptors_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getColumnDescriptors failed: unknown result")
getTableRegions (ip,op) arg_tableName = do
  send_getTableRegions op arg_tableName
  recv_getTableRegions ip
send_getTableRegions op arg_tableName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getTableRegions", M_CALL, seqn)
  write_GetTableRegions_args op (GetTableRegions_args{f_GetTableRegions_args_tableName=Just arg_tableName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getTableRegions ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetTableRegions_result ip
  readMessageEnd ip
  case f_GetTableRegions_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetTableRegions_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getTableRegions failed: unknown result")
createTable (ip,op) arg_tableName arg_columnFamilies = do
  send_createTable op arg_tableName arg_columnFamilies
  recv_createTable ip
send_createTable op arg_tableName arg_columnFamilies = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("createTable", M_CALL, seqn)
  write_CreateTable_args op (CreateTable_args{f_CreateTable_args_tableName=Just arg_tableName,f_CreateTable_args_columnFamilies=Just arg_columnFamilies})
  writeMessageEnd op
  tFlush (getTransport op)
recv_createTable ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CreateTable_result ip
  readMessageEnd ip
  case f_CreateTable_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_CreateTable_result_ia res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_CreateTable_result_exist res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
deleteTable (ip,op) arg_tableName = do
  send_deleteTable op arg_tableName
  recv_deleteTable ip
send_deleteTable op arg_tableName = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteTable", M_CALL, seqn)
  write_DeleteTable_args op (DeleteTable_args{f_DeleteTable_args_tableName=Just arg_tableName})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteTable ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteTable_result ip
  readMessageEnd ip
  case f_DeleteTable_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
get (ip,op) arg_tableName arg_row arg_column arg_attributes = do
  send_get op arg_tableName arg_row arg_column arg_attributes
  recv_get ip
send_get op arg_tableName arg_row arg_column arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("get", M_CALL, seqn)
  write_Get_args op (Get_args{f_Get_args_tableName=Just arg_tableName,f_Get_args_row=Just arg_row,f_Get_args_column=Just arg_column,f_Get_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_get ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Get_result ip
  readMessageEnd ip
  case f_Get_result_success res of
    Just v -> return v
    Nothing -> do
      case f_Get_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "get failed: unknown result")
getVer (ip,op) arg_tableName arg_row arg_column arg_numVersions arg_attributes = do
  send_getVer op arg_tableName arg_row arg_column arg_numVersions arg_attributes
  recv_getVer ip
send_getVer op arg_tableName arg_row arg_column arg_numVersions arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getVer", M_CALL, seqn)
  write_GetVer_args op (GetVer_args{f_GetVer_args_tableName=Just arg_tableName,f_GetVer_args_row=Just arg_row,f_GetVer_args_column=Just arg_column,f_GetVer_args_numVersions=Just arg_numVersions,f_GetVer_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getVer ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetVer_result ip
  readMessageEnd ip
  case f_GetVer_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetVer_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getVer failed: unknown result")
getVerTs (ip,op) arg_tableName arg_row arg_column arg_timestamp arg_numVersions arg_attributes = do
  send_getVerTs op arg_tableName arg_row arg_column arg_timestamp arg_numVersions arg_attributes
  recv_getVerTs ip
send_getVerTs op arg_tableName arg_row arg_column arg_timestamp arg_numVersions arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getVerTs", M_CALL, seqn)
  write_GetVerTs_args op (GetVerTs_args{f_GetVerTs_args_tableName=Just arg_tableName,f_GetVerTs_args_row=Just arg_row,f_GetVerTs_args_column=Just arg_column,f_GetVerTs_args_timestamp=Just arg_timestamp,f_GetVerTs_args_numVersions=Just arg_numVersions,f_GetVerTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getVerTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetVerTs_result ip
  readMessageEnd ip
  case f_GetVerTs_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetVerTs_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getVerTs failed: unknown result")
getRow (ip,op) arg_tableName arg_row arg_attributes = do
  send_getRow op arg_tableName arg_row arg_attributes
  recv_getRow ip
send_getRow op arg_tableName arg_row arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRow", M_CALL, seqn)
  write_GetRow_args op (GetRow_args{f_GetRow_args_tableName=Just arg_tableName,f_GetRow_args_row=Just arg_row,f_GetRow_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRow ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRow_result ip
  readMessageEnd ip
  case f_GetRow_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRow_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRow failed: unknown result")
getRowWithColumns (ip,op) arg_tableName arg_row arg_columns arg_attributes = do
  send_getRowWithColumns op arg_tableName arg_row arg_columns arg_attributes
  recv_getRowWithColumns ip
send_getRowWithColumns op arg_tableName arg_row arg_columns arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRowWithColumns", M_CALL, seqn)
  write_GetRowWithColumns_args op (GetRowWithColumns_args{f_GetRowWithColumns_args_tableName=Just arg_tableName,f_GetRowWithColumns_args_row=Just arg_row,f_GetRowWithColumns_args_columns=Just arg_columns,f_GetRowWithColumns_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRowWithColumns ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRowWithColumns_result ip
  readMessageEnd ip
  case f_GetRowWithColumns_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRowWithColumns_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRowWithColumns failed: unknown result")
getRowTs (ip,op) arg_tableName arg_row arg_timestamp arg_attributes = do
  send_getRowTs op arg_tableName arg_row arg_timestamp arg_attributes
  recv_getRowTs ip
send_getRowTs op arg_tableName arg_row arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRowTs", M_CALL, seqn)
  write_GetRowTs_args op (GetRowTs_args{f_GetRowTs_args_tableName=Just arg_tableName,f_GetRowTs_args_row=Just arg_row,f_GetRowTs_args_timestamp=Just arg_timestamp,f_GetRowTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRowTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRowTs_result ip
  readMessageEnd ip
  case f_GetRowTs_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRowTs_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRowTs failed: unknown result")
getRowWithColumnsTs (ip,op) arg_tableName arg_row arg_columns arg_timestamp arg_attributes = do
  send_getRowWithColumnsTs op arg_tableName arg_row arg_columns arg_timestamp arg_attributes
  recv_getRowWithColumnsTs ip
send_getRowWithColumnsTs op arg_tableName arg_row arg_columns arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRowWithColumnsTs", M_CALL, seqn)
  write_GetRowWithColumnsTs_args op (GetRowWithColumnsTs_args{f_GetRowWithColumnsTs_args_tableName=Just arg_tableName,f_GetRowWithColumnsTs_args_row=Just arg_row,f_GetRowWithColumnsTs_args_columns=Just arg_columns,f_GetRowWithColumnsTs_args_timestamp=Just arg_timestamp,f_GetRowWithColumnsTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRowWithColumnsTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRowWithColumnsTs_result ip
  readMessageEnd ip
  case f_GetRowWithColumnsTs_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRowWithColumnsTs_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRowWithColumnsTs failed: unknown result")
getRows (ip,op) arg_tableName arg_rows arg_attributes = do
  send_getRows op arg_tableName arg_rows arg_attributes
  recv_getRows ip
send_getRows op arg_tableName arg_rows arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRows", M_CALL, seqn)
  write_GetRows_args op (GetRows_args{f_GetRows_args_tableName=Just arg_tableName,f_GetRows_args_rows=Just arg_rows,f_GetRows_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRows ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRows_result ip
  readMessageEnd ip
  case f_GetRows_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRows_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRows failed: unknown result")
getRowsWithColumns (ip,op) arg_tableName arg_rows arg_columns arg_attributes = do
  send_getRowsWithColumns op arg_tableName arg_rows arg_columns arg_attributes
  recv_getRowsWithColumns ip
send_getRowsWithColumns op arg_tableName arg_rows arg_columns arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRowsWithColumns", M_CALL, seqn)
  write_GetRowsWithColumns_args op (GetRowsWithColumns_args{f_GetRowsWithColumns_args_tableName=Just arg_tableName,f_GetRowsWithColumns_args_rows=Just arg_rows,f_GetRowsWithColumns_args_columns=Just arg_columns,f_GetRowsWithColumns_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRowsWithColumns ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRowsWithColumns_result ip
  readMessageEnd ip
  case f_GetRowsWithColumns_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRowsWithColumns_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRowsWithColumns failed: unknown result")
getRowsTs (ip,op) arg_tableName arg_rows arg_timestamp arg_attributes = do
  send_getRowsTs op arg_tableName arg_rows arg_timestamp arg_attributes
  recv_getRowsTs ip
send_getRowsTs op arg_tableName arg_rows arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRowsTs", M_CALL, seqn)
  write_GetRowsTs_args op (GetRowsTs_args{f_GetRowsTs_args_tableName=Just arg_tableName,f_GetRowsTs_args_rows=Just arg_rows,f_GetRowsTs_args_timestamp=Just arg_timestamp,f_GetRowsTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRowsTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRowsTs_result ip
  readMessageEnd ip
  case f_GetRowsTs_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRowsTs_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRowsTs failed: unknown result")
getRowsWithColumnsTs (ip,op) arg_tableName arg_rows arg_columns arg_timestamp arg_attributes = do
  send_getRowsWithColumnsTs op arg_tableName arg_rows arg_columns arg_timestamp arg_attributes
  recv_getRowsWithColumnsTs ip
send_getRowsWithColumnsTs op arg_tableName arg_rows arg_columns arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRowsWithColumnsTs", M_CALL, seqn)
  write_GetRowsWithColumnsTs_args op (GetRowsWithColumnsTs_args{f_GetRowsWithColumnsTs_args_tableName=Just arg_tableName,f_GetRowsWithColumnsTs_args_rows=Just arg_rows,f_GetRowsWithColumnsTs_args_columns=Just arg_columns,f_GetRowsWithColumnsTs_args_timestamp=Just arg_timestamp,f_GetRowsWithColumnsTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRowsWithColumnsTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRowsWithColumnsTs_result ip
  readMessageEnd ip
  case f_GetRowsWithColumnsTs_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRowsWithColumnsTs_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRowsWithColumnsTs failed: unknown result")
mutateRow (ip,op) arg_tableName arg_row arg_mutations arg_attributes = do
  send_mutateRow op arg_tableName arg_row arg_mutations arg_attributes
  recv_mutateRow ip
send_mutateRow op arg_tableName arg_row arg_mutations arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("mutateRow", M_CALL, seqn)
  write_MutateRow_args op (MutateRow_args{f_MutateRow_args_tableName=Just arg_tableName,f_MutateRow_args_row=Just arg_row,f_MutateRow_args_mutations=Just arg_mutations,f_MutateRow_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_mutateRow ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_MutateRow_result ip
  readMessageEnd ip
  case f_MutateRow_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_MutateRow_result_ia res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
mutateRowTs (ip,op) arg_tableName arg_row arg_mutations arg_timestamp arg_attributes = do
  send_mutateRowTs op arg_tableName arg_row arg_mutations arg_timestamp arg_attributes
  recv_mutateRowTs ip
send_mutateRowTs op arg_tableName arg_row arg_mutations arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("mutateRowTs", M_CALL, seqn)
  write_MutateRowTs_args op (MutateRowTs_args{f_MutateRowTs_args_tableName=Just arg_tableName,f_MutateRowTs_args_row=Just arg_row,f_MutateRowTs_args_mutations=Just arg_mutations,f_MutateRowTs_args_timestamp=Just arg_timestamp,f_MutateRowTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_mutateRowTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_MutateRowTs_result ip
  readMessageEnd ip
  case f_MutateRowTs_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_MutateRowTs_result_ia res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
mutateRows (ip,op) arg_tableName arg_rowBatches arg_attributes = do
  send_mutateRows op arg_tableName arg_rowBatches arg_attributes
  recv_mutateRows ip
send_mutateRows op arg_tableName arg_rowBatches arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("mutateRows", M_CALL, seqn)
  write_MutateRows_args op (MutateRows_args{f_MutateRows_args_tableName=Just arg_tableName,f_MutateRows_args_rowBatches=Just arg_rowBatches,f_MutateRows_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_mutateRows ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_MutateRows_result ip
  readMessageEnd ip
  case f_MutateRows_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_MutateRows_result_ia res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
mutateRowsTs (ip,op) arg_tableName arg_rowBatches arg_timestamp arg_attributes = do
  send_mutateRowsTs op arg_tableName arg_rowBatches arg_timestamp arg_attributes
  recv_mutateRowsTs ip
send_mutateRowsTs op arg_tableName arg_rowBatches arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("mutateRowsTs", M_CALL, seqn)
  write_MutateRowsTs_args op (MutateRowsTs_args{f_MutateRowsTs_args_tableName=Just arg_tableName,f_MutateRowsTs_args_rowBatches=Just arg_rowBatches,f_MutateRowsTs_args_timestamp=Just arg_timestamp,f_MutateRowsTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_mutateRowsTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_MutateRowsTs_result ip
  readMessageEnd ip
  case f_MutateRowsTs_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_MutateRowsTs_result_ia res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
atomicIncrement (ip,op) arg_tableName arg_row arg_column arg_value = do
  send_atomicIncrement op arg_tableName arg_row arg_column arg_value
  recv_atomicIncrement ip
send_atomicIncrement op arg_tableName arg_row arg_column arg_value = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("atomicIncrement", M_CALL, seqn)
  write_AtomicIncrement_args op (AtomicIncrement_args{f_AtomicIncrement_args_tableName=Just arg_tableName,f_AtomicIncrement_args_row=Just arg_row,f_AtomicIncrement_args_column=Just arg_column,f_AtomicIncrement_args_value=Just arg_value})
  writeMessageEnd op
  tFlush (getTransport op)
recv_atomicIncrement ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_AtomicIncrement_result ip
  readMessageEnd ip
  case f_AtomicIncrement_result_success res of
    Just v -> return v
    Nothing -> do
      case f_AtomicIncrement_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_AtomicIncrement_result_ia res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "atomicIncrement failed: unknown result")
deleteAll (ip,op) arg_tableName arg_row arg_column arg_attributes = do
  send_deleteAll op arg_tableName arg_row arg_column arg_attributes
  recv_deleteAll ip
send_deleteAll op arg_tableName arg_row arg_column arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteAll", M_CALL, seqn)
  write_DeleteAll_args op (DeleteAll_args{f_DeleteAll_args_tableName=Just arg_tableName,f_DeleteAll_args_row=Just arg_row,f_DeleteAll_args_column=Just arg_column,f_DeleteAll_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteAll ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteAll_result ip
  readMessageEnd ip
  case f_DeleteAll_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
deleteAllTs (ip,op) arg_tableName arg_row arg_column arg_timestamp arg_attributes = do
  send_deleteAllTs op arg_tableName arg_row arg_column arg_timestamp arg_attributes
  recv_deleteAllTs ip
send_deleteAllTs op arg_tableName arg_row arg_column arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteAllTs", M_CALL, seqn)
  write_DeleteAllTs_args op (DeleteAllTs_args{f_DeleteAllTs_args_tableName=Just arg_tableName,f_DeleteAllTs_args_row=Just arg_row,f_DeleteAllTs_args_column=Just arg_column,f_DeleteAllTs_args_timestamp=Just arg_timestamp,f_DeleteAllTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteAllTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteAllTs_result ip
  readMessageEnd ip
  case f_DeleteAllTs_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
deleteAllRow (ip,op) arg_tableName arg_row arg_attributes = do
  send_deleteAllRow op arg_tableName arg_row arg_attributes
  recv_deleteAllRow ip
send_deleteAllRow op arg_tableName arg_row arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteAllRow", M_CALL, seqn)
  write_DeleteAllRow_args op (DeleteAllRow_args{f_DeleteAllRow_args_tableName=Just arg_tableName,f_DeleteAllRow_args_row=Just arg_row,f_DeleteAllRow_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteAllRow ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteAllRow_result ip
  readMessageEnd ip
  case f_DeleteAllRow_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
increment (ip,op) arg_increment = do
  send_increment op arg_increment
  recv_increment ip
send_increment op arg_increment = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("increment", M_CALL, seqn)
  write_Increment_args op (Increment_args{f_Increment_args_increment=Just arg_increment})
  writeMessageEnd op
  tFlush (getTransport op)
recv_increment ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Increment_result ip
  readMessageEnd ip
  case f_Increment_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
incrementRows (ip,op) arg_increments = do
  send_incrementRows op arg_increments
  recv_incrementRows ip
send_incrementRows op arg_increments = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("incrementRows", M_CALL, seqn)
  write_IncrementRows_args op (IncrementRows_args{f_IncrementRows_args_increments=Just arg_increments})
  writeMessageEnd op
  tFlush (getTransport op)
recv_incrementRows ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_IncrementRows_result ip
  readMessageEnd ip
  case f_IncrementRows_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
deleteAllRowTs (ip,op) arg_tableName arg_row arg_timestamp arg_attributes = do
  send_deleteAllRowTs op arg_tableName arg_row arg_timestamp arg_attributes
  recv_deleteAllRowTs ip
send_deleteAllRowTs op arg_tableName arg_row arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteAllRowTs", M_CALL, seqn)
  write_DeleteAllRowTs_args op (DeleteAllRowTs_args{f_DeleteAllRowTs_args_tableName=Just arg_tableName,f_DeleteAllRowTs_args_row=Just arg_row,f_DeleteAllRowTs_args_timestamp=Just arg_timestamp,f_DeleteAllRowTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteAllRowTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteAllRowTs_result ip
  readMessageEnd ip
  case f_DeleteAllRowTs_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
scannerOpenWithScan (ip,op) arg_tableName arg_scan arg_attributes = do
  send_scannerOpenWithScan op arg_tableName arg_scan arg_attributes
  recv_scannerOpenWithScan ip
send_scannerOpenWithScan op arg_tableName arg_scan arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerOpenWithScan", M_CALL, seqn)
  write_ScannerOpenWithScan_args op (ScannerOpenWithScan_args{f_ScannerOpenWithScan_args_tableName=Just arg_tableName,f_ScannerOpenWithScan_args_scan=Just arg_scan,f_ScannerOpenWithScan_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerOpenWithScan ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerOpenWithScan_result ip
  readMessageEnd ip
  case f_ScannerOpenWithScan_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerOpenWithScan_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerOpenWithScan failed: unknown result")
scannerOpen (ip,op) arg_tableName arg_startRow arg_columns arg_attributes = do
  send_scannerOpen op arg_tableName arg_startRow arg_columns arg_attributes
  recv_scannerOpen ip
send_scannerOpen op arg_tableName arg_startRow arg_columns arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerOpen", M_CALL, seqn)
  write_ScannerOpen_args op (ScannerOpen_args{f_ScannerOpen_args_tableName=Just arg_tableName,f_ScannerOpen_args_startRow=Just arg_startRow,f_ScannerOpen_args_columns=Just arg_columns,f_ScannerOpen_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerOpen ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerOpen_result ip
  readMessageEnd ip
  case f_ScannerOpen_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerOpen_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerOpen failed: unknown result")
scannerOpenWithStop (ip,op) arg_tableName arg_startRow arg_stopRow arg_columns arg_attributes = do
  send_scannerOpenWithStop op arg_tableName arg_startRow arg_stopRow arg_columns arg_attributes
  recv_scannerOpenWithStop ip
send_scannerOpenWithStop op arg_tableName arg_startRow arg_stopRow arg_columns arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerOpenWithStop", M_CALL, seqn)
  write_ScannerOpenWithStop_args op (ScannerOpenWithStop_args{f_ScannerOpenWithStop_args_tableName=Just arg_tableName,f_ScannerOpenWithStop_args_startRow=Just arg_startRow,f_ScannerOpenWithStop_args_stopRow=Just arg_stopRow,f_ScannerOpenWithStop_args_columns=Just arg_columns,f_ScannerOpenWithStop_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerOpenWithStop ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerOpenWithStop_result ip
  readMessageEnd ip
  case f_ScannerOpenWithStop_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerOpenWithStop_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerOpenWithStop failed: unknown result")
scannerOpenWithPrefix (ip,op) arg_tableName arg_startAndPrefix arg_columns arg_attributes = do
  send_scannerOpenWithPrefix op arg_tableName arg_startAndPrefix arg_columns arg_attributes
  recv_scannerOpenWithPrefix ip
send_scannerOpenWithPrefix op arg_tableName arg_startAndPrefix arg_columns arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerOpenWithPrefix", M_CALL, seqn)
  write_ScannerOpenWithPrefix_args op (ScannerOpenWithPrefix_args{f_ScannerOpenWithPrefix_args_tableName=Just arg_tableName,f_ScannerOpenWithPrefix_args_startAndPrefix=Just arg_startAndPrefix,f_ScannerOpenWithPrefix_args_columns=Just arg_columns,f_ScannerOpenWithPrefix_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerOpenWithPrefix ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerOpenWithPrefix_result ip
  readMessageEnd ip
  case f_ScannerOpenWithPrefix_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerOpenWithPrefix_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerOpenWithPrefix failed: unknown result")
scannerOpenTs (ip,op) arg_tableName arg_startRow arg_columns arg_timestamp arg_attributes = do
  send_scannerOpenTs op arg_tableName arg_startRow arg_columns arg_timestamp arg_attributes
  recv_scannerOpenTs ip
send_scannerOpenTs op arg_tableName arg_startRow arg_columns arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerOpenTs", M_CALL, seqn)
  write_ScannerOpenTs_args op (ScannerOpenTs_args{f_ScannerOpenTs_args_tableName=Just arg_tableName,f_ScannerOpenTs_args_startRow=Just arg_startRow,f_ScannerOpenTs_args_columns=Just arg_columns,f_ScannerOpenTs_args_timestamp=Just arg_timestamp,f_ScannerOpenTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerOpenTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerOpenTs_result ip
  readMessageEnd ip
  case f_ScannerOpenTs_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerOpenTs_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerOpenTs failed: unknown result")
scannerOpenWithStopTs (ip,op) arg_tableName arg_startRow arg_stopRow arg_columns arg_timestamp arg_attributes = do
  send_scannerOpenWithStopTs op arg_tableName arg_startRow arg_stopRow arg_columns arg_timestamp arg_attributes
  recv_scannerOpenWithStopTs ip
send_scannerOpenWithStopTs op arg_tableName arg_startRow arg_stopRow arg_columns arg_timestamp arg_attributes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerOpenWithStopTs", M_CALL, seqn)
  write_ScannerOpenWithStopTs_args op (ScannerOpenWithStopTs_args{f_ScannerOpenWithStopTs_args_tableName=Just arg_tableName,f_ScannerOpenWithStopTs_args_startRow=Just arg_startRow,f_ScannerOpenWithStopTs_args_stopRow=Just arg_stopRow,f_ScannerOpenWithStopTs_args_columns=Just arg_columns,f_ScannerOpenWithStopTs_args_timestamp=Just arg_timestamp,f_ScannerOpenWithStopTs_args_attributes=Just arg_attributes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerOpenWithStopTs ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerOpenWithStopTs_result ip
  readMessageEnd ip
  case f_ScannerOpenWithStopTs_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerOpenWithStopTs_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerOpenWithStopTs failed: unknown result")
scannerGet (ip,op) arg_id = do
  send_scannerGet op arg_id
  recv_scannerGet ip
send_scannerGet op arg_id = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerGet", M_CALL, seqn)
  write_ScannerGet_args op (ScannerGet_args{f_ScannerGet_args_id=Just arg_id})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerGet ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerGet_result ip
  readMessageEnd ip
  case f_ScannerGet_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerGet_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ScannerGet_result_ia res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerGet failed: unknown result")
scannerGetList (ip,op) arg_id arg_nbRows = do
  send_scannerGetList op arg_id arg_nbRows
  recv_scannerGetList ip
send_scannerGetList op arg_id arg_nbRows = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerGetList", M_CALL, seqn)
  write_ScannerGetList_args op (ScannerGetList_args{f_ScannerGetList_args_id=Just arg_id,f_ScannerGetList_args_nbRows=Just arg_nbRows})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerGetList ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerGetList_result ip
  readMessageEnd ip
  case f_ScannerGetList_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ScannerGetList_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ScannerGetList_result_ia res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "scannerGetList failed: unknown result")
scannerClose (ip,op) arg_id = do
  send_scannerClose op arg_id
  recv_scannerClose ip
send_scannerClose op arg_id = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("scannerClose", M_CALL, seqn)
  write_ScannerClose_args op (ScannerClose_args{f_ScannerClose_args_id=Just arg_id})
  writeMessageEnd op
  tFlush (getTransport op)
recv_scannerClose ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ScannerClose_result ip
  readMessageEnd ip
  case f_ScannerClose_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_ScannerClose_result_ia res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
getRowOrBefore (ip,op) arg_tableName arg_row arg_family = do
  send_getRowOrBefore op arg_tableName arg_row arg_family
  recv_getRowOrBefore ip
send_getRowOrBefore op arg_tableName arg_row arg_family = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRowOrBefore", M_CALL, seqn)
  write_GetRowOrBefore_args op (GetRowOrBefore_args{f_GetRowOrBefore_args_tableName=Just arg_tableName,f_GetRowOrBefore_args_row=Just arg_row,f_GetRowOrBefore_args_family=Just arg_family})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRowOrBefore ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRowOrBefore_result ip
  readMessageEnd ip
  case f_GetRowOrBefore_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRowOrBefore_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRowOrBefore failed: unknown result")
getRegionInfo (ip,op) arg_row = do
  send_getRegionInfo op arg_row
  recv_getRegionInfo ip
send_getRegionInfo op arg_row = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRegionInfo", M_CALL, seqn)
  write_GetRegionInfo_args op (GetRegionInfo_args{f_GetRegionInfo_args_row=Just arg_row})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRegionInfo ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRegionInfo_result ip
  readMessageEnd ip
  case f_GetRegionInfo_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRegionInfo_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRegionInfo failed: unknown result")
