{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Database.HBase.Internal.Thrift2.THBaseService_Client(exists,get,getMultiple,put,checkAndPut,putMultiple,deleteSingle,deleteMultiple,checkAndDelete,increment,openScanner,getScannerRows,closeScanner,mutateRow,getScannerResults) where
import Data.IORef
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


import Database.HBase.Internal.Thrift2.HBase_Types
import Database.HBase.Internal.Thrift2.THBaseService
seqid = newIORef 0
exists (ip,op) arg_table arg_get = do
  send_exists op arg_table arg_get
  recv_exists ip
send_exists op arg_table arg_get = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("exists", M_CALL, seqn)
  write_Exists_args op (Exists_args{f_Exists_args_table=Just arg_table,f_Exists_args_get=Just arg_get})
  writeMessageEnd op
  tFlush (getTransport op)
recv_exists ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Exists_result ip
  readMessageEnd ip
  case f_Exists_result_success res of
    Just v -> return v
    Nothing -> do
      case f_Exists_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "exists failed: unknown result")
get (ip,op) arg_table arg_get = do
  send_get op arg_table arg_get
  recv_get ip
send_get op arg_table arg_get = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("get", M_CALL, seqn)
  write_Get_args op (Get_args{f_Get_args_table=Just arg_table,f_Get_args_get=Just arg_get})
  writeMessageEnd op
  tFlush (getTransport op)
recv_get ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Get_result ip
  readMessageEnd ip
  case f_Get_result_success res of
    Just v -> return v
    Nothing -> do
      case f_Get_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "get failed: unknown result")
getMultiple (ip,op) arg_table arg_gets = do
  send_getMultiple op arg_table arg_gets
  recv_getMultiple ip
send_getMultiple op arg_table arg_gets = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getMultiple", M_CALL, seqn)
  write_GetMultiple_args op (GetMultiple_args{f_GetMultiple_args_table=Just arg_table,f_GetMultiple_args_gets=Just arg_gets})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getMultiple ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetMultiple_result ip
  readMessageEnd ip
  case f_GetMultiple_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetMultiple_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getMultiple failed: unknown result")
put (ip,op) arg_table arg_put = do
  send_put op arg_table arg_put
  recv_put ip
send_put op arg_table arg_put = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("put", M_CALL, seqn)
  write_Put_args op (Put_args{f_Put_args_table=Just arg_table,f_Put_args_put=Just arg_put})
  writeMessageEnd op
  tFlush (getTransport op)
recv_put ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Put_result ip
  readMessageEnd ip
  case f_Put_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
checkAndPut (ip,op) arg_table arg_row arg_family arg_qualifier arg_value arg_put = do
  send_checkAndPut op arg_table arg_row arg_family arg_qualifier arg_value arg_put
  recv_checkAndPut ip
send_checkAndPut op arg_table arg_row arg_family arg_qualifier arg_value arg_put = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("checkAndPut", M_CALL, seqn)
  write_CheckAndPut_args op (CheckAndPut_args{f_CheckAndPut_args_table=Just arg_table,f_CheckAndPut_args_row=Just arg_row,f_CheckAndPut_args_family=Just arg_family,f_CheckAndPut_args_qualifier=Just arg_qualifier,f_CheckAndPut_args_value=Just arg_value,f_CheckAndPut_args_put=Just arg_put})
  writeMessageEnd op
  tFlush (getTransport op)
recv_checkAndPut ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CheckAndPut_result ip
  readMessageEnd ip
  case f_CheckAndPut_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CheckAndPut_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "checkAndPut failed: unknown result")
putMultiple (ip,op) arg_table arg_puts = do
  send_putMultiple op arg_table arg_puts
  recv_putMultiple ip
send_putMultiple op arg_table arg_puts = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("putMultiple", M_CALL, seqn)
  write_PutMultiple_args op (PutMultiple_args{f_PutMultiple_args_table=Just arg_table,f_PutMultiple_args_puts=Just arg_puts})
  writeMessageEnd op
  tFlush (getTransport op)
recv_putMultiple ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_PutMultiple_result ip
  readMessageEnd ip
  case f_PutMultiple_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
deleteSingle (ip,op) arg_table arg_deleteSingle = do
  send_deleteSingle op arg_table arg_deleteSingle
  recv_deleteSingle ip
send_deleteSingle op arg_table arg_deleteSingle = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteSingle", M_CALL, seqn)
  write_DeleteSingle_args op (DeleteSingle_args{f_DeleteSingle_args_table=Just arg_table,f_DeleteSingle_args_deleteSingle=Just arg_deleteSingle})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteSingle ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteSingle_result ip
  readMessageEnd ip
  case f_DeleteSingle_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
deleteMultiple (ip,op) arg_table arg_deletes = do
  send_deleteMultiple op arg_table arg_deletes
  recv_deleteMultiple ip
send_deleteMultiple op arg_table arg_deletes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteMultiple", M_CALL, seqn)
  write_DeleteMultiple_args op (DeleteMultiple_args{f_DeleteMultiple_args_table=Just arg_table,f_DeleteMultiple_args_deletes=Just arg_deletes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteMultiple ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteMultiple_result ip
  readMessageEnd ip
  case f_DeleteMultiple_result_success res of
    Just v -> return v
    Nothing -> do
      case f_DeleteMultiple_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "deleteMultiple failed: unknown result")
checkAndDelete (ip,op) arg_table arg_row arg_family arg_qualifier arg_value arg_deleteSingle = do
  send_checkAndDelete op arg_table arg_row arg_family arg_qualifier arg_value arg_deleteSingle
  recv_checkAndDelete ip
send_checkAndDelete op arg_table arg_row arg_family arg_qualifier arg_value arg_deleteSingle = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("checkAndDelete", M_CALL, seqn)
  write_CheckAndDelete_args op (CheckAndDelete_args{f_CheckAndDelete_args_table=Just arg_table,f_CheckAndDelete_args_row=Just arg_row,f_CheckAndDelete_args_family=Just arg_family,f_CheckAndDelete_args_qualifier=Just arg_qualifier,f_CheckAndDelete_args_value=Just arg_value,f_CheckAndDelete_args_deleteSingle=Just arg_deleteSingle})
  writeMessageEnd op
  tFlush (getTransport op)
recv_checkAndDelete ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CheckAndDelete_result ip
  readMessageEnd ip
  case f_CheckAndDelete_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CheckAndDelete_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "checkAndDelete failed: unknown result")
increment (ip,op) arg_table arg_increment = do
  send_increment op arg_table arg_increment
  recv_increment ip
send_increment op arg_table arg_increment = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("increment", M_CALL, seqn)
  write_Increment_args op (Increment_args{f_Increment_args_table=Just arg_table,f_Increment_args_increment=Just arg_increment})
  writeMessageEnd op
  tFlush (getTransport op)
recv_increment ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Increment_result ip
  readMessageEnd ip
  case f_Increment_result_success res of
    Just v -> return v
    Nothing -> do
      case f_Increment_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "increment failed: unknown result")
openScanner (ip,op) arg_table arg_scan = do
  send_openScanner op arg_table arg_scan
  recv_openScanner ip
send_openScanner op arg_table arg_scan = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("openScanner", M_CALL, seqn)
  write_OpenScanner_args op (OpenScanner_args{f_OpenScanner_args_table=Just arg_table,f_OpenScanner_args_scan=Just arg_scan})
  writeMessageEnd op
  tFlush (getTransport op)
recv_openScanner ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_OpenScanner_result ip
  readMessageEnd ip
  case f_OpenScanner_result_success res of
    Just v -> return v
    Nothing -> do
      case f_OpenScanner_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "openScanner failed: unknown result")
getScannerRows (ip,op) arg_scannerId arg_numRows = do
  send_getScannerRows op arg_scannerId arg_numRows
  recv_getScannerRows ip
send_getScannerRows op arg_scannerId arg_numRows = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getScannerRows", M_CALL, seqn)
  write_GetScannerRows_args op (GetScannerRows_args{f_GetScannerRows_args_scannerId=Just arg_scannerId,f_GetScannerRows_args_numRows=Just arg_numRows})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getScannerRows ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetScannerRows_result ip
  readMessageEnd ip
  case f_GetScannerRows_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetScannerRows_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetScannerRows_result_ia res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getScannerRows failed: unknown result")
closeScanner (ip,op) arg_scannerId = do
  send_closeScanner op arg_scannerId
  recv_closeScanner ip
send_closeScanner op arg_scannerId = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("closeScanner", M_CALL, seqn)
  write_CloseScanner_args op (CloseScanner_args{f_CloseScanner_args_scannerId=Just arg_scannerId})
  writeMessageEnd op
  tFlush (getTransport op)
recv_closeScanner ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CloseScanner_result ip
  readMessageEnd ip
  case f_CloseScanner_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_CloseScanner_result_ia res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
mutateRow (ip,op) arg_table arg_rowMutations = do
  send_mutateRow op arg_table arg_rowMutations
  recv_mutateRow ip
send_mutateRow op arg_table arg_rowMutations = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("mutateRow", M_CALL, seqn)
  write_MutateRow_args op (MutateRow_args{f_MutateRow_args_table=Just arg_table,f_MutateRow_args_rowMutations=Just arg_rowMutations})
  writeMessageEnd op
  tFlush (getTransport op)
recv_mutateRow ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_MutateRow_result ip
  readMessageEnd ip
  case f_MutateRow_result_io res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
getScannerResults (ip,op) arg_table arg_scan arg_numRows = do
  send_getScannerResults op arg_table arg_scan arg_numRows
  recv_getScannerResults ip
send_getScannerResults op arg_table arg_scan arg_numRows = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getScannerResults", M_CALL, seqn)
  write_GetScannerResults_args op (GetScannerResults_args{f_GetScannerResults_args_table=Just arg_table,f_GetScannerResults_args_scan=Just arg_scan,f_GetScannerResults_args_numRows=Just arg_numRows})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getScannerResults ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetScannerResults_result ip
  readMessageEnd ip
  case f_GetScannerResults_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetScannerResults_result_io res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getScannerResults failed: unknown result")
