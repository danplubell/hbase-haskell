{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Database.Hbase.Internal.Hbase_Iface where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


import Database.Hbase.Internal.Hbase_Types

class Hbase_Iface a where
  enableTable :: a -> Maybe ByteString -> IO ()
  disableTable :: a -> Maybe ByteString -> IO ()
  isTableEnabled :: a -> Maybe ByteString -> IO Bool
  compact :: a -> Maybe ByteString -> IO ()
  majorCompact :: a -> Maybe ByteString -> IO ()
  getTableNames :: a -> IO (Vector.Vector ByteString)
  getColumnDescriptors :: a -> Maybe ByteString -> IO (Map.HashMap ByteString ColumnDescriptor)
  getTableRegions :: a -> Maybe ByteString -> IO (Vector.Vector TRegionInfo)
  createTable :: a -> Maybe ByteString -> Maybe (Vector.Vector ColumnDescriptor) -> IO ()
  deleteTable :: a -> Maybe ByteString -> IO ()
  get :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TCell)
  getVer :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe Int32 -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TCell)
  getVerTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe Int64 -> Maybe Int32 -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TCell)
  getRow :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  getRowWithColumns :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  getRowTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  getRowWithColumnsTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  getRows :: a -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  getRowsWithColumns :: a -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe (Vector.Vector ByteString) -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  getRowsTs :: a -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  getRowsWithColumnsTs :: a -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe (Vector.Vector ByteString) -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO (Vector.Vector TRowResult)
  mutateRow :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector Mutation) -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  mutateRowTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector Mutation) -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  mutateRows :: a -> Maybe ByteString -> Maybe (Vector.Vector BatchMutation) -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  mutateRowsTs :: a -> Maybe ByteString -> Maybe (Vector.Vector BatchMutation) -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  atomicIncrement :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe Int64 -> IO Int64
  deleteAll :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  deleteAllTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  deleteAllRow :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  increment :: a -> Maybe TIncrement -> IO ()
  incrementRows :: a -> Maybe (Vector.Vector TIncrement) -> IO ()
  deleteAllRowTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO ()
  scannerOpenWithScan :: a -> Maybe ByteString -> Maybe TScan -> Maybe (Map.HashMap ByteString ByteString) -> IO Int32
  scannerOpen :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe (Map.HashMap ByteString ByteString) -> IO Int32
  scannerOpenWithStop :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe (Map.HashMap ByteString ByteString) -> IO Int32
  scannerOpenWithPrefix :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe (Map.HashMap ByteString ByteString) -> IO Int32
  scannerOpenTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO Int32
  scannerOpenWithStopTs :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> Maybe (Vector.Vector ByteString) -> Maybe Int64 -> Maybe (Map.HashMap ByteString ByteString) -> IO Int32
  scannerGet :: a -> Maybe Int32 -> IO (Vector.Vector TRowResult)
  scannerGetList :: a -> Maybe Int32 -> Maybe Int32 -> IO (Vector.Vector TRowResult)
  scannerClose :: a -> Maybe Int32 -> IO ()
  getRowOrBefore :: a -> Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> IO (Vector.Vector TCell)
  getRegionInfo :: a -> Maybe ByteString -> IO TRegionInfo
